/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const SearchIndexLazyImport = createFileRoute('/search/')()
const AuthIndexLazyImport = createFileRoute('/auth/')()
const ProfileIdLazyImport = createFileRoute('/profile/$id')()
const GroupRecommendedLazyImport = createFileRoute('/group/recommended')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SearchIndexLazyRoute = SearchIndexLazyImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search/index.lazy').then((d) => d.Route))

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const ProfileIdLazyRoute = ProfileIdLazyImport.update({
  id: '/profile/$id',
  path: '/profile/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/$id.lazy').then((d) => d.Route))

const GroupRecommendedLazyRoute = GroupRecommendedLazyImport.update({
  id: '/group/recommended',
  path: '/group/recommended',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/group/recommended.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/group/recommended': {
      id: '/group/recommended'
      path: '/group/recommended'
      fullPath: '/group/recommended'
      preLoaderRoute: typeof GroupRecommendedLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$id': {
      id: '/profile/$id'
      path: '/profile/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof ProfileIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/group/recommended': typeof GroupRecommendedLazyRoute
  '/profile/$id': typeof ProfileIdLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/search': typeof SearchIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/group/recommended': typeof GroupRecommendedLazyRoute
  '/profile/$id': typeof ProfileIdLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/search': typeof SearchIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/group/recommended': typeof GroupRecommendedLazyRoute
  '/profile/$id': typeof ProfileIdLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
  '/search/': typeof SearchIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/group/recommended' | '/profile/$id' | '/auth' | '/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/group/recommended' | '/profile/$id' | '/auth' | '/search'
  id:
    | '__root__'
    | '/'
    | '/group/recommended'
    | '/profile/$id'
    | '/auth/'
    | '/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  GroupRecommendedLazyRoute: typeof GroupRecommendedLazyRoute
  ProfileIdLazyRoute: typeof ProfileIdLazyRoute
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
  SearchIndexLazyRoute: typeof SearchIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  GroupRecommendedLazyRoute: GroupRecommendedLazyRoute,
  ProfileIdLazyRoute: ProfileIdLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
  SearchIndexLazyRoute: SearchIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/group/recommended",
        "/profile/$id",
        "/auth/",
        "/search/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/group/recommended": {
      "filePath": "group/recommended.lazy.tsx"
    },
    "/profile/$id": {
      "filePath": "profile/$id.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx"
    },
    "/search/": {
      "filePath": "search/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
